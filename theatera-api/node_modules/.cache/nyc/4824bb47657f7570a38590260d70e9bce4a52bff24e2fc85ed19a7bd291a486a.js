/* require('dotenv').config()
const { env: { TEST_DB_URL } } = process
const { expect } = require('chai')
const { random } = Math
const sendComment = require('.')
const { errors: { NotFoundError, ConflictError, ContentError } } = require('theatera-util')
const { ObjectId, database, models: { User, Post, Comment } } = require('theatera-data')

describe('logic - sendComment', () => {
    before(() => database.connect(TEST_DB_URL))

    let userId, postId, description

    beforeEach(async() => {


        const name = `name-${random()}`
        const email = `email-${random()}@mail.com`
        const password = `password-${random()}`
        random() > 0.5 ? rol = 'COMPANY' : rol = 'PERSON'

        await Promise.all([User.deleteMany()])

        let user = await User.create({ name, email, password, rol })
        userId = user.id

        description = `description-${random()}`
        const date = new Date
        const type = 'ARTICLE'
        const body = `body-${random()}`
        const post = new Post({ user: ObjectId(userId), body, type, date })
        postId = post.id

        user.posts.push(post)
        await user.save()
        debugger
    })


    it('Should succed on sended comment', async() => {

        debugger
        const comment = await sendComment(userId, postId, description)

        const _post = await Post.findById(postId)
        const _comment = _post.comments[0].id
        expect(comment).to.be.equal(_comment)

    })



 */ /* after(() => User.deleteMany().then(database.disconnect))

})

 */ /* it('should fail on unexisting user and correct post', async() => {
    const userId = ObjectId().toString()

    try {
        await sendComment(userId, postId, description)
        throw new Error('should not reach this point')
    } catch (error) {
        expect(error).to.exist
        expect(error).to.be.an.instanceOf(NotFoundError)
        expect(error.message).to.equal(`user with id ${userId} not found`)
    }
})


it('should fail on incorrect user objectId', async() => {
    const wrongUserId = `userId-${random()}`

    try {
        await sendComment(wrongUserId, postId, description)
        throw new Error('should not reach this point')
    } catch (error) {
        expect(error).to.exist
        expect(error).to.be.an.instanceOf(ContentError)
        expect(error.message).to.equal(`${wrongUserId} is not a valid id`)
    }

}) */var cov_1e1qu7ez2e=function(){var path="/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/send-comment/index.spec.js";var hash="9b3cb25908fdd0e50f1924792eace1f910e447bd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/send-comment/index.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"9b3cb25908fdd0e50f1924792eace1f910e447bd"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();