/* require('dotenv').config()
const { env: { TEST_DB_URL } } = process
const { expect } = require('chai')
const { random } = Math
const retrieveConnections = require('.')
const { errors: { NotFoundError } } = require('theatera-util')
const { database, models: { User } } = require('theatera-data')



describe('logic - retrieveNews', () => {
    before(() => database.connect(TEST_DB_URL))

    let id1, id2, newId, name, email, password, rol,

        beforeEach(async() => {
            name = `name-${random()}`
            email = `email-${random()}@mail.com`
            password = `password-${random()}`
            rol = 'PERSON'

            await User.deleteMany()

            user1 = await User.create({ name, email, password, rol })
            id1 = user1.id

            name = `name-${random()}`
            email = `email-${random()}@mail.com`
            password = `password-${random()}`
            rol = 'COMPANY'

            user2 = await User.create({ name, email, password, rol })
            id2 = user2.id

            const notification = { text: "this is a new" }

            user1.news.push(notification)

            await user1.save()
        })



    it('should succeed on array of news', async() => {

        const news = await retrieveNews(id1)

        const _new = news[0]


        expect(_new.id).to.exist
        expect(_new.id).to.be.a('string')
        expect(_new.id).to.have.length.greaterThan(0)
        expect(_new.id).to.be.equal(newId)

        expect(_new.name).to.exist
        expect(_new.name).to.be.a('string')
        expect(_new.name).to.have.length.greaterThan(0)
        expect(_new.name).to.be.equal(name)
    })

    it('should succeed on user without friend', async() => {

        name = `name-${random()}`
        email = `email-${random()}@mail.com`
        password = `password-${random()}`
        random() > 0.5 ? rol = 'PERSON' : rol = 'COMPANY'
        const user3 = await User.create({ name, email, password, rol })

        const _friends = await retrieveConnections(user3.id)

        expect(_friends.length).to.be.equal(0)

    })


    after(() => User.deleteMany().then(database.disconnect))

}) */var cov_1bponcf81d=function(){var path="/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/retrieve-news/index.spec.js";var hash="1719c5a2eb1dfd2f802711eb4e6332d14e40c5ca";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/retrieve-news/index.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"1719c5a2eb1dfd2f802711eb4e6332d14e40c5ca"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();