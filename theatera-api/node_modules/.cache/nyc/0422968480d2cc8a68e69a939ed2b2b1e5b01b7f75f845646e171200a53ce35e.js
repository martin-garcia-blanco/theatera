var cov_1e1qu7ez2e=function(){var path="/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/send-comment/index.spec.js";var hash="4169fab914ff2822f6e9310cdfd74c08ee658bb1";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/send-comment/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:19},end:{line:4,column:23}},"4":{start:{line:5,column:20},end:{line:5,column:32}},"5":{start:{line:6,column:67},end:{line:6,column:91}},"6":{start:{line:7,column:64},end:{line:7,column:88}},"7":{start:{line:9,column:0},end:{line:86,column:2}},"8":{start:{line:10,column:4},end:{line:10,column:47}},"9":{start:{line:10,column:17},end:{line:10,column:46}},"10":{start:{line:14,column:4},end:{line:37,column:6}},"11":{start:{line:17,column:21},end:{line:17,column:39}},"12":{start:{line:18,column:22},end:{line:18,column:50}},"13":{start:{line:19,column:25},end:{line:19,column:47}},"14":{start:{line:20,column:8},end:{line:20,column:57}},"15":{start:{line:22,column:8},end:{line:22,column:46}},"16":{start:{line:24,column:19},end:{line:24,column:68}},"17":{start:{line:25,column:8},end:{line:25,column:24}},"18":{start:{line:27,column:8},end:{line:27,column:47}},"19":{start:{line:28,column:21},end:{line:28,column:29}},"20":{start:{line:29,column:21},end:{line:29,column:30}},"21":{start:{line:30,column:21},end:{line:30,column:39}},"22":{start:{line:31,column:21},end:{line:31,column:75}},"23":{start:{line:32,column:8},end:{line:32,column:24}},"24":{start:{line:34,column:8},end:{line:34,column:29}},"25":{start:{line:35,column:8},end:{line:35,column:16}},"26":{start:{line:36,column:8},end:{line:36,column:25}},"27":{start:{line:40,column:4},end:{line:51,column:6}},"28":{start:{line:43,column:8},end:{line:43,column:16}},"29":{start:{line:44,column:24},end:{line:44,column:64}},"30":{start:{line:46,column:22},end:{line:46,column:43}},"31":{start:{line:47,column:25},end:{line:47,column:45}},"32":{start:{line:48,column:8},end:{line:48,column:45}},"33":{start:{line:84,column:4},end:{line:84,column:60}},"34":{start:{line:84,column:16},end:{line:84,column:59}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:32},end:{line:9,column:33}},loc:{start:{line:9,column:38},end:{line:86,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:11},end:{line:10,column:12}},loc:{start:{line:10,column:17},end:{line:10,column:46}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:14,column:15},end:{line:14,column:16}},loc:{start:{line:14,column:26},end:{line:37,column:5}},line:14},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:51},end:{line:40,column:52}},loc:{start:{line:40,column:62},end:{line:51,column:5}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:84,column:10},end:{line:84,column:11}},loc:{start:{line:84,column:16},end:{line:84,column:59}},line:84}},branchMap:{"0":{loc:{start:{line:20,column:8},end:{line:20,column:57}},type:"cond-expr",locations:[{start:{line:20,column:25},end:{line:20,column:40}},{start:{line:20,column:43},end:{line:20,column:57}}],line:20},"1":{loc:{start:{line:40,column:4},end:{line:51,column:6}},type:"binary-expr",locations:[{start:{line:40,column:4},end:{line:40,column:9}},{start:{line:40,column:13},end:{line:51,column:6}}],line:40}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"4169fab914ff2822f6e9310cdfd74c08ee658bb1"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_1e1qu7ez2e.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_1e1qu7ez2e.s[1]++,process);const{expect}=(cov_1e1qu7ez2e.s[2]++,require('chai'));const{random}=(cov_1e1qu7ez2e.s[3]++,Math);const sendComment=(cov_1e1qu7ez2e.s[4]++,require('.'));const{errors:{NotFoundError,ConflictError,ContentError}}=(cov_1e1qu7ez2e.s[5]++,require('theatera-util'));const{ObjectId,database,models:{User,Post,Comment}}=(cov_1e1qu7ez2e.s[6]++,require('theatera-data'));cov_1e1qu7ez2e.s[7]++;describe('logic - sendComment',()=>{cov_1e1qu7ez2e.f[0]++;cov_1e1qu7ez2e.s[8]++;before(()=>{cov_1e1qu7ez2e.f[1]++;cov_1e1qu7ez2e.s[9]++;return database.connect(TEST_DB_URL);});let userId,postId,description;cov_1e1qu7ez2e.s[10]++;beforeEach(async()=>{cov_1e1qu7ez2e.f[2]++;const name=(cov_1e1qu7ez2e.s[11]++,`name-${random()}`);const email=(cov_1e1qu7ez2e.s[12]++,`email-${random()}@mail.com`);const password=(cov_1e1qu7ez2e.s[13]++,`password-${random()}`);cov_1e1qu7ez2e.s[14]++;random()>0.5?(cov_1e1qu7ez2e.b[0][0]++,rol='COMPANY'):(cov_1e1qu7ez2e.b[0][1]++,rol='PERSON');cov_1e1qu7ez2e.s[15]++;await Promise.all([User.deleteMany()]);let user=(cov_1e1qu7ez2e.s[16]++,await User.create({name,email,password,rol}));cov_1e1qu7ez2e.s[17]++;userId=user.id;cov_1e1qu7ez2e.s[18]++;description=`description-${random()}`;const date=(cov_1e1qu7ez2e.s[19]++,new Date());const type=(cov_1e1qu7ez2e.s[20]++,'ARTICLE');const body=(cov_1e1qu7ez2e.s[21]++,`body-${random()}`);const post=(cov_1e1qu7ez2e.s[22]++,new Post({user:ObjectId(userId),body,type,date}));cov_1e1qu7ez2e.s[23]++;postId=post.id;cov_1e1qu7ez2e.s[24]++;user.posts.push(post);cov_1e1qu7ez2e.s[25]++;debugger;cov_1e1qu7ez2e.s[26]++;await user.save();});cov_1e1qu7ez2e.s[27]++;(cov_1e1qu7ez2e.b[1][0]++,false)&&(cov_1e1qu7ez2e.b[1][1]++,it('Should succed on sended comment',async()=>{cov_1e1qu7ez2e.f[3]++;cov_1e1qu7ez2e.s[28]++;//'Here'
debugger;const comment=(cov_1e1qu7ez2e.s[29]++,sendComment(userId,postId,description));const _post=(cov_1e1qu7ez2e.s[30]++,Post.findById(postId));const _comment=(cov_1e1qu7ez2e.s[31]++,_post.comments[0].id);cov_1e1qu7ez2e.s[32]++;expect(comment).to.be.equal(_comment);//message body
}));/* it('should fail on unexisting user and correct post', async() => {
        const userId = ObjectId().toString()

        try {
            await sendComment(userId, postId, description)
            throw new Error('should not reach this point')
        } catch (error) {
            expect(error).to.exist
            expect(error).to.be.an.instanceOf(NotFoundError)
            expect(error.message).to.equal(`user with id ${userId} not found`)
        }
    })


    it('should fail on incorrect user objectId', async() => {
        const wrongUserId = `userId-${random()}`

        try {
            await sendComment(wrongUserId, postId, description)
            throw new Error('should not reach this point')
        } catch (error) {
            expect(error).to.exist
            expect(error).to.be.an.instanceOf(ContentError)
            expect(error.message).to.equal(`${wrongUserId} is not a valid id`)
        }

    }) */cov_1e1qu7ez2e.s[33]++;after(()=>{cov_1e1qu7ez2e.f[4]++;cov_1e1qu7ez2e.s[34]++;return User.deleteMany().then(database.disconnect);});});