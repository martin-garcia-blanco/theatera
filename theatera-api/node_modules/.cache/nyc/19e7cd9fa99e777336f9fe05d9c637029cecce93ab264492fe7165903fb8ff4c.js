/* require('dotenv').config()
const { env: { TEST_DB_URL } } = process
const { expect } = require('chai')
const { random } = Math
const createExperienceItem = require('.')
const { errors: { NotFoundError } } = require('theatera-util')
const { database, models: { User, ExperienceItem } } = require('theatera-data')

describe('logic - createExperienceItem', () => {
    before(() => database.connect(TEST_DB_URL))

    let userId, title, dateStart, dateEnd, body

    beforeEach(async() => {
        name = `name-${random()}`
        email = `email-${random()}@mail.com`
        password = `password-${random()}`
        random() > 0.5 ? rol = 'COMPANY' : rol = 'PERSON'



        let a = await Promise.all([User.deleteMany(), ExperienceItem.deleteMany()])

        debugger

        const user = await User.create({ name, email, password, rol })

        debugger


    })

    it('asf', () => {
        expect(3).to.be.equal(3)
    })


}) */var cov_1qcyzsa9hn=function(){var path="/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/create-experience-item/index.spec.js";var hash="8d40cfe12051dd003cc7ab1bd8e3c3803798ac14";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/create-experience-item/index.spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"8d40cfe12051dd003cc7ab1bd8e3c3803798ac14"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();