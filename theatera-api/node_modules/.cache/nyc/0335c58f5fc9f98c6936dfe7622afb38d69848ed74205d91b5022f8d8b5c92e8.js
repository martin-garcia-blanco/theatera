var cov_willyrdoo=function(){var path="/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/update-user/index.spec.js";var hash="e565f59af48947b7799d901d4431973501512c0f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/martingarcia/bootcamp/colab/skylab-bootcamp-201909/staff/martin-garcia/theatera/theatera-api/logic/update-user/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:2,column:33},end:{line:2,column:40}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:19},end:{line:4,column:23}},"4":{start:{line:5,column:19},end:{line:5,column:31}},"5":{start:{line:6,column:52},end:{line:6,column:76}},"6":{start:{line:7,column:63},end:{line:7,column:87}},"7":{start:{line:13,column:0},end:{line:216,column:2}},"8":{start:{line:14,column:4},end:{line:14,column:47}},"9":{start:{line:14,column:17},end:{line:14,column:46}},"10":{start:{line:18,column:4},end:{line:40,column:6}},"11":{start:{line:19,column:8},end:{line:19,column:33}},"12":{start:{line:20,column:8},end:{line:20,column:44}},"13":{start:{line:21,column:8},end:{line:21,column:49}},"14":{start:{line:22,column:8},end:{line:22,column:47}},"15":{start:{line:23,column:8},end:{line:23,column:37}},"16":{start:{line:24,column:8},end:{line:24,column:35}},"17":{start:{line:25,column:8},end:{line:25,column:39}},"18":{start:{line:26,column:8},end:{line:26,column:33}},"19":{start:{line:27,column:8},end:{line:27,column:68}},"20":{start:{line:28,column:8},end:{line:28,column:37}},"21":{start:{line:29,column:8},end:{line:29,column:37}},"22":{start:{line:30,column:8},end:{line:30,column:22}},"23":{start:{line:31,column:8},end:{line:31,column:41}},"24":{start:{line:34,column:8},end:{line:34,column:31}},"25":{start:{line:36,column:8},end:{line:36,column:171}},"26":{start:{line:38,column:8},end:{line:38,column:36}},"27":{start:{line:42,column:4},end:{line:73,column:6}},"28":{start:{line:43,column:24},end:{line:43,column:46}},"29":{start:{line:44,column:32},end:{line:44,column:62}},"30":{start:{line:45,column:31},end:{line:45,column:60}},"31":{start:{line:46,column:24},end:{line:46,column:46}},"32":{start:{line:47,column:8},end:{line:47,column:16}},"33":{start:{line:48,column:25},end:{line:48,column:188}},"34":{start:{line:50,column:8},end:{line:50,column:37}},"35":{start:{line:52,column:22},end:{line:52,column:49}},"36":{start:{line:53,column:8},end:{line:53,column:16}},"37":{start:{line:54,column:8},end:{line:54,column:42}},"38":{start:{line:55,column:8},end:{line:55,column:51}},"39":{start:{line:56,column:8},end:{line:56,column:63}},"40":{start:{line:57,column:8},end:{line:57,column:58}},"41":{start:{line:59,column:8},end:{line:59,column:35}},"42":{start:{line:60,column:8},end:{line:60,column:44}},"43":{start:{line:61,column:8},end:{line:61,column:56}},"44":{start:{line:62,column:8},end:{line:62,column:44}},"45":{start:{line:64,column:8},end:{line:64,column:35}},"46":{start:{line:65,column:8},end:{line:65,column:44}},"47":{start:{line:66,column:8},end:{line:66,column:56}},"48":{start:{line:67,column:8},end:{line:67,column:47}},"49":{start:{line:69,column:8},end:{line:69,column:43}},"50":{start:{line:70,column:8},end:{line:70,column:52}},"51":{start:{line:71,column:8},end:{line:71,column:64}},"52":{start:{line:72,column:8},end:{line:72,column:63}},"53":{start:{line:75,column:4},end:{line:110,column:6}},"54":{start:{line:76,column:23},end:{line:76,column:39}},"55":{start:{line:77,column:31},end:{line:77,column:60}},"56":{start:{line:78,column:26},end:{line:78,column:43}},"57":{start:{line:80,column:26},end:{line:80,column:53}},"58":{start:{line:82,column:25},end:{line:82,column:91}},"59":{start:{line:84,column:8},end:{line:84,column:37}},"60":{start:{line:86,column:21},end:{line:86,column:48}},"61":{start:{line:88,column:8},end:{line:88,column:49}},"62":{start:{line:90,column:8},end:{line:90,column:35}},"63":{start:{line:91,column:8},end:{line:91,column:44}},"64":{start:{line:92,column:8},end:{line:92,column:56}},"65":{start:{line:93,column:8},end:{line:93,column:42}},"66":{start:{line:95,column:8},end:{line:95,column:41}},"67":{start:{line:96,column:8},end:{line:96,column:50}},"68":{start:{line:97,column:8},end:{line:97,column:62}},"69":{start:{line:98,column:8},end:{line:98,column:57}},"70":{start:{line:100,column:8},end:{line:100,column:36}},"71":{start:{line:101,column:8},end:{line:101,column:45}},"72":{start:{line:102,column:8},end:{line:102,column:57}},"73":{start:{line:103,column:8},end:{line:103,column:47}},"74":{start:{line:105,column:8},end:{line:105,column:34}},"75":{start:{line:106,column:8},end:{line:106,column:51}},"76":{start:{line:108,column:8},end:{line:108,column:40}},"77":{start:{line:109,column:8},end:{line:109,column:57}},"78":{start:{line:112,column:4},end:{line:147,column:6}},"79":{start:{line:113,column:23},end:{line:113,column:39}},"80":{start:{line:114,column:25},end:{line:114,column:48}},"81":{start:{line:115,column:26},end:{line:115,column:43}},"82":{start:{line:117,column:32},end:{line:117,column:59}},"83":{start:{line:119,column:25},end:{line:119,column:85}},"84":{start:{line:121,column:8},end:{line:121,column:37}},"85":{start:{line:123,column:21},end:{line:123,column:48}},"86":{start:{line:125,column:8},end:{line:125,column:49}},"87":{start:{line:127,column:8},end:{line:127,column:35}},"88":{start:{line:128,column:8},end:{line:128,column:44}},"89":{start:{line:129,column:8},end:{line:129,column:56}},"90":{start:{line:130,column:8},end:{line:130,column:45}},"91":{start:{line:132,column:8},end:{line:132,column:41}},"92":{start:{line:133,column:8},end:{line:133,column:50}},"93":{start:{line:134,column:8},end:{line:134,column:62}},"94":{start:{line:135,column:8},end:{line:135,column:54}},"95":{start:{line:137,column:8},end:{line:137,column:36}},"96":{start:{line:138,column:8},end:{line:138,column:45}},"97":{start:{line:139,column:8},end:{line:139,column:57}},"98":{start:{line:140,column:8},end:{line:140,column:47}},"99":{start:{line:142,column:8},end:{line:142,column:34}},"100":{start:{line:143,column:8},end:{line:143,column:51}},"101":{start:{line:145,column:8},end:{line:145,column:40}},"102":{start:{line:146,column:8},end:{line:146,column:57}},"103":{start:{line:215,column:4},end:{line:215,column:94}},"104":{start:{line:215,column:16},end:{line:215,column:93}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:31},end:{line:13,column:32}},loc:{start:{line:13,column:37},end:{line:216,column:1}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:14,column:11},end:{line:14,column:12}},loc:{start:{line:14,column:17},end:{line:14,column:46}},line:14},"2":{name:"(anonymous_2)",decl:{start:{line:18,column:15},end:{line:18,column:16}},loc:{start:{line:18,column:26},end:{line:40,column:5}},line:18},"3":{name:"(anonymous_3)",decl:{start:{line:42,column:42},end:{line:42,column:43}},loc:{start:{line:42,column:53},end:{line:73,column:5}},line:42},"4":{name:"(anonymous_4)",decl:{start:{line:75,column:88},end:{line:75,column:89}},loc:{start:{line:75,column:99},end:{line:110,column:5}},line:75},"5":{name:"(anonymous_5)",decl:{start:{line:112,column:92},end:{line:112,column:93}},loc:{start:{line:112,column:103},end:{line:147,column:5}},line:112},"6":{name:"(anonymous_6)",decl:{start:{line:215,column:10},end:{line:215,column:11}},loc:{start:{line:215,column:16},end:{line:215,column:93}},line:215}},branchMap:{"0":{loc:{start:{line:75,column:4},end:{line:110,column:6}},type:"binary-expr",locations:[{start:{line:75,column:4},end:{line:75,column:9}},{start:{line:75,column:13},end:{line:110,column:6}}],line:75},"1":{loc:{start:{line:112,column:4},end:{line:147,column:6}},type:"binary-expr",locations:[{start:{line:112,column:4},end:{line:112,column:9}},{start:{line:112,column:13},end:{line:147,column:6}}],line:112}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e565f59af48947b7799d901d4431973501512c0f"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_willyrdoo.s[0]++;require('dotenv').config();const{env:{TEST_DB_URL}}=(cov_willyrdoo.s[1]++,process);const{expect}=(cov_willyrdoo.s[2]++,require('chai'));const{random}=(cov_willyrdoo.s[3]++,Math);const updateUser=(cov_willyrdoo.s[4]++,require('.'));const{errors:{NotFoundError,ContentError}}=(cov_willyrdoo.s[5]++,require('theatera-util'));const{ObjectId,database,models:{User,Notification}}=(cov_willyrdoo.s[6]++,require('theatera-data'));cov_willyrdoo.s[7]++;describe('logic - updateUser',()=>{cov_willyrdoo.f[0]++;cov_willyrdoo.s[8]++;before(()=>{cov_willyrdoo.f[1]++;cov_willyrdoo.s[9]++;return database.connect(TEST_DB_URL);});let userId,user,name,introduction,description,gender,age,phone,email,website,city,languages,height,weight,rol;cov_willyrdoo.s[10]++;beforeEach(async()=>{cov_willyrdoo.f[2]++;cov_willyrdoo.s[11]++;name=`name-${random()}`;cov_willyrdoo.s[12]++;email=`email-${random()}@mail.com`;cov_willyrdoo.s[13]++;introduction=`introduction-${random()}`;cov_willyrdoo.s[14]++;description=`description-${random()}`;cov_willyrdoo.s[15]++;gender=`gender-${random()}`;cov_willyrdoo.s[16]++;phone=`phone-${random()}`;cov_willyrdoo.s[17]++;website=`website-${random()}`;cov_willyrdoo.s[18]++;city=`city-${random()}`;cov_willyrdoo.s[19]++;languages=[`language-${random()}`,`language-${random()}`];cov_willyrdoo.s[20]++;height=`height-${random()}`;cov_willyrdoo.s[21]++;weight=`weight-${random()}`;cov_willyrdoo.s[22]++;rol="PERSON";cov_willyrdoo.s[23]++;password=`password-${random()}`;cov_willyrdoo.s[24]++;await User.deleteMany();cov_willyrdoo.s[25]++;user=await User.create({name,password,introduction,description,phone,email,website,city,rol,specificInfo:{languages,height,weight,gender,age}});cov_willyrdoo.s[26]++;userId=user._id.toString();});cov_willyrdoo.s[27]++;it('should succeed on correct user ',async()=>{cov_willyrdoo.f[3]++;const newName=(cov_willyrdoo.s[28]++,`New-name-${random()}`);const newIntroduction=(cov_willyrdoo.s[29]++,`New-introduction-${random()}`);const newDescription=(cov_willyrdoo.s[30]++,`New-description-${random()}`);const newCity=(cov_willyrdoo.s[31]++,`new-City-${random()}`);cov_willyrdoo.s[32]++;debugger;const response=(cov_willyrdoo.s[33]++,await updateUser(userId,newName,newIntroduction,newDescription,undefined,undefined,undefined,undefined,undefined,newCity,undefined,undefined,undefined));cov_willyrdoo.s[34]++;expect(response).to.not.exist;const _user=(cov_willyrdoo.s[35]++,await User.findById(userId));cov_willyrdoo.s[36]++;debugger;cov_willyrdoo.s[37]++;expect(_user.description).to.exist;cov_willyrdoo.s[38]++;expect(_user.description).to.be.a('string');cov_willyrdoo.s[39]++;expect(_user.description).to.have.length.greaterThan(0);cov_willyrdoo.s[40]++;expect(_user.description).to.equal(newDescription);cov_willyrdoo.s[41]++;expect(_user.name).to.exist;cov_willyrdoo.s[42]++;expect(_user.name).to.be.a('string');cov_willyrdoo.s[43]++;expect(_user.name).to.have.length.greaterThan(0);cov_willyrdoo.s[44]++;expect(_user.name).to.equal(newName);cov_willyrdoo.s[45]++;expect(_user.city).to.exist;cov_willyrdoo.s[46]++;expect(_user.city).to.be.a('string');cov_willyrdoo.s[47]++;expect(_user.city).to.have.length.greaterThan(0);cov_willyrdoo.s[48]++;expect(_user.city).to.equal(newnewCity);cov_willyrdoo.s[49]++;expect(_user.introduction).to.exist;cov_willyrdoo.s[50]++;expect(_user.introduction).to.be.a('string');cov_willyrdoo.s[51]++;expect(_user.introduction).to.have.length.greaterThan(0);cov_willyrdoo.s[52]++;expect(_user.introduction).to.equal(newnewIntroduction);});cov_willyrdoo.s[53]++;(cov_willyrdoo.b[0][0]++,false)&&(cov_willyrdoo.b[0][1]++,it('should succeed on correct user and new data, except for introduction',async()=>{cov_willyrdoo.f[4]++;const taskId=(cov_willyrdoo.s[54]++,taskIds.random());const newDescription=(cov_willyrdoo.s[55]++,`new-description-${random()}`);const newStatus=(cov_willyrdoo.s[56]++,statuses.random());const{title}=(cov_willyrdoo.s[57]++,await Task.findById(taskId));const response=(cov_willyrdoo.s[58]++,await updateUser(id,taskId,undefined,newDescription,newStatus));cov_willyrdoo.s[59]++;expect(response).to.not.exist;const task=(cov_willyrdoo.s[60]++,await Task.findById(taskId));cov_willyrdoo.s[61]++;expect(task.user.toString()).to.equal(id);cov_willyrdoo.s[62]++;expect(task.title).to.exist;cov_willyrdoo.s[63]++;expect(task.title).to.be.a('string');cov_willyrdoo.s[64]++;expect(task.title).to.have.length.greaterThan(0);cov_willyrdoo.s[65]++;expect(task.title).to.equal(title);cov_willyrdoo.s[66]++;expect(task.description).to.exist;cov_willyrdoo.s[67]++;expect(task.description).to.be.a('string');cov_willyrdoo.s[68]++;expect(task.description).to.have.length.greaterThan(0);cov_willyrdoo.s[69]++;expect(task.description).to.equal(newDescription);cov_willyrdoo.s[70]++;expect(task.status).to.exist;cov_willyrdoo.s[71]++;expect(task.status).to.be.a('string');cov_willyrdoo.s[72]++;expect(task.status).to.have.length.greaterThan(0);cov_willyrdoo.s[73]++;expect(task.status).to.equal(newStatus);cov_willyrdoo.s[74]++;expect(task.date).to.exist;cov_willyrdoo.s[75]++;expect(task.date).to.be.an.instanceOf(Date);cov_willyrdoo.s[76]++;expect(task.lastAccess).to.exist;cov_willyrdoo.s[77]++;expect(task.lastAccess).to.be.an.instanceOf(Date);}));cov_willyrdoo.s[78]++;(cov_willyrdoo.b[1][0]++,false)&&(cov_willyrdoo.b[1][1]++,it('should succeed on correct user and new task data, except for description',async()=>{cov_willyrdoo.f[5]++;const taskId=(cov_willyrdoo.s[79]++,taskIds.random());const newTitle=(cov_willyrdoo.s[80]++,`new-title-${random()}`);const newStatus=(cov_willyrdoo.s[81]++,statuses.random());const{description}=(cov_willyrdoo.s[82]++,await Task.findById(taskId));const response=(cov_willyrdoo.s[83]++,await updateUser(id,taskId,newTitle,undefined,newStatus));cov_willyrdoo.s[84]++;expect(response).to.not.exist;const task=(cov_willyrdoo.s[85]++,await Task.findById(taskId));cov_willyrdoo.s[86]++;expect(task.user.toString()).to.equal(id);cov_willyrdoo.s[87]++;expect(task.title).to.exist;cov_willyrdoo.s[88]++;expect(task.title).to.be.a('string');cov_willyrdoo.s[89]++;expect(task.title).to.have.length.greaterThan(0);cov_willyrdoo.s[90]++;expect(task.title).to.equal(newTitle);cov_willyrdoo.s[91]++;expect(task.description).to.exist;cov_willyrdoo.s[92]++;expect(task.description).to.be.a('string');cov_willyrdoo.s[93]++;expect(task.description).to.have.length.greaterThan(0);cov_willyrdoo.s[94]++;expect(task.description).to.equal(description);cov_willyrdoo.s[95]++;expect(task.status).to.exist;cov_willyrdoo.s[96]++;expect(task.status).to.be.a('string');cov_willyrdoo.s[97]++;expect(task.status).to.have.length.greaterThan(0);cov_willyrdoo.s[98]++;expect(task.status).to.equal(newStatus);cov_willyrdoo.s[99]++;expect(task.date).to.exist;cov_willyrdoo.s[100]++;expect(task.date).to.be.an.instanceOf(Date);cov_willyrdoo.s[101]++;expect(task.lastAccess).to.exist;cov_willyrdoo.s[102]++;expect(task.lastAccess).to.be.an.instanceOf(Date);}));/*  it('should fail on unexisting user and correct task data', async() => {
        const id = ObjectId().toString()
        const taskId = taskIds.random()
        const newTitle = `new-title-${random()}`
        const newDescription = `new-description-${random()}`
        const newStatus = statuses.random()

        try {
            await updateUser(id, taskId, newTitle, newDescription, newStatus)

            throw new Error('should not reach this point')
        } catch (error) {
            expect(error).to.exist
            expect(error).to.be.an.instanceOf(NotFoundError)
            expect(error.message).to.equal(`user with id ${id} not found`)
        }
    })

    it('should fail on correct user and unexisting task data', async() => {
        const taskId = ObjectId().toString()
        const newTitle = `new-title-${random()}`
        const newDescription = `new-description-${random()}`
        const newStatus = statuses.random()

        try {
            await updateUser(id, taskId, newTitle, newDescription, newStatus)

            throw new Error('should not reach this point')
        } catch (error) {
            expect(error).to.exist
            expect(error).to.be.an.instanceOf(NotFoundError)
            expect(error.message).to.equal(`user does not have task with id ${taskId}`)
        }
    })

    it('should fail on correct user and wrong task data', async() => {
        const { _id } = await Task.findOne({ _id: { $nin: taskIds.map(taskId => ObjectId(taskId)) } })

        const taskId = _id.toString()
        const newTitle = `new-title-${random()}`
        const newDescription = `new-description-${random()}`
        const newStatus = statuses.random()

        try {
            await updateUser(id, taskId, newTitle, newDescription, newStatus)

            throw new Error('should not reach this point')
        } catch (error) {
            expect(error).to.exist
            expect(error).to.be.an.instanceOf(ConflictError)
            expect(error.message).to.equal(`user with id ${id} does not correspond to task with id ${taskId}`)
        }
    })

    it('should fail on correct user and wrong task status', () => {
        const taskId = taskIds.random()
        const newTitle = `new-title-${random()}`
        const newDescription = `new-description-${random()}`
        const newStatus = 'wrong-status'

        expect(() => updateUser(id, taskId, newTitle, newDescription, newStatus)).to.throw(ContentError, `${newStatus} does not match any of the valid status values: ${statuses}`)
    })
 */ // TODO other test cases
cov_willyrdoo.s[103]++;after(()=>{cov_willyrdoo.f[6]++;cov_willyrdoo.s[104]++;return Promise.all([User.deleteMany(),Task.deleteMany()]).then(database.disconnect);});});